@using RunningObjects.MVC
@using RunningObjects.MVC.Html
@using RunningObjects.MVC.Mapping
@model IEnumerable<NamespaceMapping>
@helper Namespace(NamespaceMapping ns)
    {
    <li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown">
        @ns.Name
    </a>
        @if (ns.Namespaces.Any(n => n.Visible) || ns.Types.Any(t => t.Visible))
        {
            <ul class="dropdown-menu">
                @foreach (var cns in ns.Namespaces.Where(n => n.Visible))
                {
                    @Namespace(cns)
                }
                @foreach (var type in ns.Types.Where(t => t.Visible))
                {
                    @Type(type)
                }
            </ul>
        }
    </li>
    
}
@helper Type(TypeMapping type)
    {
        
    <li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown">
        @type.Name
        <b class="caret"></b></a>
        <ul class="dropdown-menu">
            @foreach (var query in type.Queries)
            {
                <li>
                    @Html.ActionLink(query.Name, type.ModelType, RunningObjectsAction.Index, new { q = query.ID })
                </li>
            }
            @if (type.Constructors.Any() || type.StaticMethods.Any())
            {
                <li class="divider"></li>
                foreach (var ctor in type.Constructors)
                {
                @Method(ctor)
                }
                foreach (var method in type.StaticMethods)
                {
                @Method(method)
                }
            }
        </ul>
    </li>

}
@helper Method(MethodMapping method)
    {
    <li>
        @{
            var argument = method.UnderlineAction == RunningObjectsAction.Create
                ? (object)new { index = method.Index }
                : new { methodName = method.MethodName, index = method.Index };
        }
        @Html.ActionLink(method.Name, method.Type.ModelType, method.UnderlineAction, argument)
    </li>

}
<ul class="nav">
    @foreach (var ns in Model)
    {
        foreach (var type in ns.Types.Where(t => t.Visible))
        {
        @Type(type)
        }

        foreach (var cns in ns.Namespaces.Where(n => n.Visible))
        {
        @Namespace(cns)
        }
    }
</ul>
